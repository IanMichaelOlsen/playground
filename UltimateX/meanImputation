#include <iostream>
#include <vector>
#include <unordered_map>
#include <numeric>

int main() {
    std::vector<int> data = {1, 3, 4, 5, 6, 7, 8, 9};
    std::unordered_map<int, bool> hashmap;
    for (int i = 1; i <= 10; i++) {
        hashmap[i] = false;
    }
    for (int i : data) {
        hashmap[i] = true;
    }
    std::vector<int> missing_values;
    for (int i = 1; i <= 10; i++) {
        if (!hashmap[i]) {
            missing_values.push_back(i);
        }
    }
    int sum = std::accumulate(data.begin(), data.end(), 0);
    int missing_value_sum = 55 - sum;
    int mean_imputation = missing_value_sum / 2;
    int missing_value1 = missing_values[0];
    int missing_value2 = missing_values[1];
    if (mean_imputation - missing_value1 == missing_value2) {
        std::cout << "The first missing value is: " << missing_value1 << std::endl;
        std::cout << "The second missing value is: " << missing_value2 << std::endl;
    } else {
        std::cout << "The first missing value is: " << missing_value2 << std::endl;
        std::cout << "The second missing value is: " << missing_value1 << std::endl;
    }
    return 0;
}
